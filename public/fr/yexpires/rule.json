{"content": "<p>Il ya deux aspects \u00e0 cette r\u00e8gle :</p><ul><li>Pour les composants statiques : mettre en \u0153uvre une politique du \u00abn&rsquo;expire jamais\u00bb par l&rsquo;utilisation d&rsquo;en-t\u00eates Expire fix\u00e9s loin dans le futur.</li><li>Pour les composants dynamiques : utiliser un en-t\u00eate Cache-Control appropri\u00e9 pour aider le navigateur avec les requ\u00eates conditionnelles.</li></ul><p>Le design des pages web est de plus en plus riche, ce qui signifie plus de scripts, plus de feuilles de style, plus d&rsquo;images et de Flash dans la page. Un nouveau visiteur de votre page peut avoir \u00e0 faire plusieurs requ\u00eates HTTP, mais en utilisant l&rsquo;en-t\u00eate Expire, vous rendez ces composants cachables. Cela \u00e9vite les requ\u00eates HTTP inutiles sur les pages vues ult\u00e9rieurement. Les en-t\u00eates Expire sont le plus souvent utilis\u00e9s avec des images, mais ils doivent \u00eatre utilis\u00e9s sur tous les composants, y compris les scripts, les feuilles de style et les composants Flash.</p><p>Les navigateurs (et les proxies) utilisent un cache afin de r\u00e9duire le nombre et la taille des requ\u00eates HTTP, ce qui acc\u00e9l\u00e8re le chargement des pages. Un serveur web utilise l&rsquo;en-t\u00eate Expire dans la r\u00e9ponse HTTP pour indiquer au client combien de temps un composant peut \u00eatre mis en cache. Une date lointaine dans l&rsquo;en-t\u00eate Expire indique au navigateur que cette r\u00e9ponse reste valide jusqu&rsquo;au 15 Avril 2015.</p><pre><code>Expires: Thu, 15 Apr 2015 20:00:00 GMT</code></pre><p>Si votre serveur est Apache, utilisez la directive ExpiresDefault qui permet de fixer une date d&rsquo;expiration par rapport \u00e0 la date actuelle. Cet exemple de directive ExpiresDefault fixe la date d&rsquo;expiration dans 10 ans \u00e0 partir du moment de la demande.</p><pre><code>ExpiresDefault &quot;access plus 10 years&quot;</code></pre><p>Gardez \u00e0 l&rsquo;esprit, si vous utilisez un en-t\u00eate Expire loin dans le futur que vous devrez changer le nom de fichier du composant \u00e0 chaque fois que celui-ci est modifi\u00e9. Chez Yahoo!, un num\u00e9ro de version est int\u00e9gr\u00e9 dans le nom de fichier du composant, par exemple yahoo_2.0.6.js.</p><p>Utiliser un en-t\u00eate Expire loin dans le futur affecte uniquement les pages vues d&rsquo;un utilisateur revenant sur votre site. Cela n&rsquo;a aucun effet sur \u200b\u200ble nombre de requ\u00eates HTTP n\u00e9cessaires quand un utilisateur visite votre site pour la premi\u00e8re fois et que la m\u00e9moire cache du navigateur est vide. Par cons\u00e9quent, l&rsquo; impact de cette am\u00e9lioration de la performance d\u00e9pend de la fr\u00e9quence d&rsquo;utilisateurs r\u00e9guliers. Ceux-ci poss\u00e8dent en effet un cache amorc\u00e9. (Un \u00abcache amorc\u00e9\u00bb contient d\u00e9j\u00e0 tous les \u00e9l\u00e9ments de la page.) Nous <a href=\"http://yuiblog.com/blog/2007/01/04/performance-research-part-2/\">avons mesur\u00e9 ceci chez Yahoo!</a> et trouv\u00e9 que le nombre de pages vues avec un cache amorc\u00e9 est de 75 \u00e0 85 %. En utilisant un en-t\u00eate Expire loin dans le futur, vous augmentez le nombre de composants qui sont mis en cache par le navigateur et re-utilis\u00e9s sur les vues ult\u00e9rieures de pages sans envoyer un seul octet sur \u200b\u200bla connexion Internet de l&rsquo;utilisateur.</p>", "id": "yexpires", "title": "Ajouter des en-t\u00eates Expires ou Cache-Control"}